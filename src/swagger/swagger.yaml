openapi: 3.0.3
info:
  title: pikapick-API
  description: 코드잇 풀스택 2기 PART3 2팀의 피카픽포토 API 명세입니다.
  version: 1.0.0
servers:
  - url: https://pikapick.onrender.com
tags:
  - name: auth
    description: 로그인, 회원가입, 토큰 관리
  - name: user
    description: 유저 기반 API
  - name: shop
    description: 판매 관련 API
  - name: exchange
    description: 교환 관련 API
  - name: points
    description: 포인트 관련 API
  - name: notification
    description: 알림 관련 API
  - name: pet ########### example
    description: 참고 예시
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nickname:
          type: string
          example: '유저닉네임'
        email:
          type: string
          example: 'john@email.com'
        password:
          type: string
          example: 'password'
        point:
          type: number
          example: 50
        lastDrawTime:
          type: string
        createdAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        myCards:
          $ref: '#/components/schemas/Card'
        shops:
          $ref: '#/components/schemas/Shop'
        purchases:
          $ref: '#/components/schemas/Purchase'
        sellingExchanges:
          $ref: '#/components/schemas/Exchange'
        buyingExchanges:
          $ref: '#/components/schemas/Exchange'
        notifications:
          $ref: '#/components/schemas/Notification'
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          example: 'SHOP'
        content:
          type: string
          example: 'content'
        idRead:
          type: boolean
          example: false
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
    Card:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ownerId:
          type: string
          format: uuid
        name:
          type: string
          example: '카드 이름'
        price:
          type: integer
          example: 5
        grade:
          type: string
          enum:
            - COMMON
            - RARE
            - SUPER_RARE
            - LEGENDARY
        type:
          type: array
          items:
            type: string
        description:
          type: string
          example: '카드 설명'
        quantity:
          type: integer
          example: 5
        image:
          type: string
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        shops:
          $ref: '#/components/schemas/Shop'
        sellerExchanges:
          $ref: '#/components/schemas/Exchange'
        buyerExchanges:
          $ref: '#/components/schemas/Exchange'
    Shop:
      type: object
      properties:
        id:
          type: string
          format: uuid
        price:
          type: integer
          example: 5
        totalQuantity:
          type: integer
          example: 10
        remainingQuantity:
          type: integer
          example: 8
        exchangeGrade:
          type: string
          enum:
            - COMMON
            - RARE
            - SUPER_RARE
            - LEGENDARY
        exchangeType:
          type: array
          items:
            type: string
        exchangeDetails:
          type: string
          example: '교환 요청 내용'
        available:
          type: boolean
          example: true
        sellerId:
          type: string
        cardId:
          type: string
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        seller:
          $ref: '#/components/schemas/User'
        card:
          $ref: '#/components/schemas/Card'
        purchase:
          $ref: '#/components/schemas/Purchase'
        exchanges:
          $ref: '#/components/schemas/Exchange'
    Purchase:
      type: object
      properties:
        id:
          type: string
          format: uuid
        quantity:
          type: integer
          example: 5
        totalPrice:
          type: integer
          example: 20
        buyerId:
          type: string
          format: uuid
        shopId:
          type: string
          format: uuid
        buyer:
          $ref: '#/components/schemas/User'
        shop:
          $ref: '#/components/schemas/Shop'
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
    Exchange:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
          example: '교환 제안 내용'
        complete:
          type: boolean
          example: false
        sellerId:
          type: string
          format: uuid
        buyerId:
          type: string
          format: uuid
        selerCardId:
          type: string
          format: uuid
        buyerCardId:
          type: string
          format: uuid
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        seller:
          $ref: '#/components/schemas/User'
        buyer:
          $ref: '#/components/schemas/User'
        sellerCard:
          $ref: '#/components/schemas/Card'
        buyerCard:
          $ref: '#/components/schemas/Card'
        shop:
          $ref: '#/components/schemas/Shop'
    PointLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        amount:
          type: integer
          example: 5
        action:
          type: string
          enum:
            - INITIAL_POINT
            - PURCHASE
            - SALE
            - RANDOM_REWARD
        userId:
          type: string
          format: uuid
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        user:
          $ref: '#/components/schemas/User'
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Pet'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
