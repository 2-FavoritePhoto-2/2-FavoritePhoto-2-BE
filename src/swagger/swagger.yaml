openapi: 3.0.3
info:
  title: pikapick-API
  description: 코드잇 풀스택 2기 중급프로젝트 2팀의 피카픽포토 API 명세입니다.
  version: 1.0.0
servers:
  - url: https://pikapick.onrender.com
tags:
  - name: auth
    description: 로그인, 회원가입, 토큰 관리
  - name: user
    description: 유저 기반 API
  - name: shop
    description: 판매 관련 API
  - name: exchange
    description: 교환 관련 API
  - name: points
    description: 포인트 관련 API
  - name: notification
    description: 알림 관련 API
paths:
  /user/profile:
    get:
      tags:
        - user
      summary: 내 프로필 조회
      description: 로그인한 사용자의 포인트 및 닉네임 정보를 조회합니다.
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 성공적으로 프로필을 반환합니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  point:
                    type: integer
                    example: 100
                  nickname:
                    type: string
                    example: 'string'
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/cards/{cardId}:
    get:
      tags:
        - user
      summary: 내 포켓몬 카드 상세 조회
      description: 특정 카드의 상세정보를 가져옵니다.
      operationId: getPhotoCardDetails
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          description: 조회할 카드 ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 카드 상세 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  price:
                    type: integer
                    minimum: 0
                  grade:
                    type: string
                    enum: [COMMON, RARE, SUPER_RARE, LEGENDARY]
                  type:
                    type: array
                    items:
                      type: string
                  description:
                    type: string
                    maxLength: 500
                  image:
                    type: string
                    format: uri
                  quantity:
                    type: integer
                    minimum: 0
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: '찾을 수 없음'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/exchanges/{shopId}:
    get:
      tags:
        - user
      summary: 특정 상점의 교환 요청 조회
      description: 특정 상점에 대한 교환 요청 정보를 조회합니다.
      operationId: getExchangesByShopId
      security:
        - bearerAuth: []
      parameters:
        - name: shopId
          in: path
          description: 조회할 상점의 ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 교환 요청 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: 교환 요청 ID
                    description:
                      type: string
                      description: 교환을 신청 합니다.
                    buyerCard:
                      type: object
                      properties:
                        name:
                          type: string
                          description: 구매자가 제안한 카드 이름
                        grade:
                          type: string
                          enum: [COMMON, RARE, SUPER_RARE, LEGENDARY]
                          description: 카드 등급
                        type:
                          type: array
                          items:
                            type: string
                          description: 카드 타입 배열
                        description:
                          type: string
                          description: 교환을 신청합니다.
                        image:
                          type: string
                          format: uri
                          description: 구매자가 제안한 카드 이미지 URL
                        price:
                          type: integer
                          minimum: 0
                          description: 구매자가 제안한 카드 가격
                        buyerNickname:
                          type: string
                          description: 구매자의 닉네임
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: '찾을 수 없음'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/my-cards/sales:
    get:
      tags:
        - user
      summary: 사용자가 판매 또는 교환 중인 카드 조회
      description: 사용자가 판매 또는 교환 중인 카드 목록을 조회합니다.
      operationId: getMyCardsOnSale
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: pageSize
          in: query
          description: 한 페이지당 항목 수
          required: false
          schema:
            type: integer
            default: 12
            minimum: 1
        - name: keyword
          in: query
          description: 카드 이름 검색 키워드
          required: false
          schema:
            type: string
        - name: grade
          in: query
          description: 카드 등급 필터
          required: false
          schema:
            type: string
            enum: [COMMON, RARE, SUPER_RARE, LEGENDARY]
        - name: type
          in: query
          description: 카드 타입 필터
          required: false
          schema:
            type: string
        - name: available
          in: query
          description: 카드가 현재 사용 가능한지 여부
          required: false
          schema:
            type: boolean
        - name: mode
          in: query
          description: 데이터 모드 선택
          required: false
          schema:
            type: string
            enum: [shop, exchange, all]
      responses:
        '200':
          description: 카드 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: integer
                    description: 전체 카드 개수
                  card:
                    type: array
                    description: 현재 페이지에 포함된 카드 목록
                    items:
                      type: object
                      properties:
                        mode:
                          type: string
                          description: 카드가 포함된 모드
                        nickname:
                          type: string
                          description: 판매자 또는 구매자의 닉네임
                        cardName:
                          type: string
                          description: 카드 이름
                        grade:
                          type: string
                          enum: [COMMON, RARE, SUPER_RARE, LEGENDARY]
                          description: 카드 등급
                        type:
                          type: array
                          items:
                            type: string
                          description: 카드 타입 배열
                        description:
                          type: string
                          description: 카드 설명
                        image:
                          type: string
                          format: uri
                          description: 카드 이미지 URL
                        price:
                          type: integer
                          minimum: 0
                          description: 카드 가격
                        quantity:
                          type: integer
                          minimum: 1
                          description: 카드 수량
                        createdAt:
                          type: string
                          format: data-time
                          description: 카드 생성 날짜
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/cards:
    get:
      tags:
        - user
      summary: '내 포켓몬 카드 전체 조회'
      description: '나의 포켓몬 카드를 전체 조회 합니다.'
      operationId: getUserPhotoCards
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: 한 페이지당 항목 수
          required: false
          schema:
            type: integer
            default: 10
        - name: orderBy
          in: query
          description: 정렬 옵션
          required: false
          schema:
            type: string
            enum: [priceLowest, priceHighest, nameAsc, nameDesc]
            default: priceLowest
        - name: keyword
          in: query
          description: 카드 검색
          required: false
          schema:
            type: string
        - name: grade
          in: query
          description: 카드 등급 필터
          required: false
          schema:
            type: string
            enum: [COMMON, RARE, SUPER_RARE, LEGENDARY]
        - name: type
          in: query
          description: 카드 타입 필터
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 성공적으로 나의 포토카드를 반환합니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: integer
                    minimum: 0
                  card:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        price:
                          type: integer
                          minimum: 0
                        grade:
                          type: string
                          enum: [COMMON, RARE, SUPER_RARE, LEGENDARY]
                        type:
                          type: array
                          items:
                            type: string
                        description:
                          type: string
                          maxLength: 500
                        image:
                          type: string
                          format: uri
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - user
      summary: 포켓몬 카드 생성
      description: 사용자가 새로운 포켓몬 카드를 생성합니다.
      operationId: createPhotoCard
      security:
        - bearerAuth: [] # 인증 정보
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                ownerId:
                  type: string
                  description: 카드를 소유할 사용자 ID
                name:
                  type: string
                  description: 카드 이름
                price:
                  type: integer
                  description: 카드 가격
                grade:
                  type: string
                  description: 카드 등급
                quantity:
                  type: integer
                  description: 카드 수량
                type:
                  type: string
                  description: 카드 유형
                description:
                  type: string
                  description: 카드 설명
                image:
                  type: string
                  format: binary # 파일 업로드는 'binary' 형식으로 처리
      responses:
        '201':
          description: 카드 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  ownerId:
                    type: string
                  name:
                    type: string
                  price:
                    type: integer
                  grade:
                    type: string
                  quantity:
                    type: integer
                  type:
                    type: array
                    items:
                      type: string
                  description:
                    type: string
                  image:
                    type: string
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/signup:
    post:
      tags:
        - auth
      summary: '회원가입'
      description: '회원 생성하는 API입니다.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  example: '유저닉네임'
                email:
                  type: string
                  example: 'john@email.com'
                password:
                  type: string
                  example: 'password'
      responses:
        '201':
          description: '회원가입 성공'
        '500':
          description: '회원가입 실패'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      tags:
        - auth
      summary: '로그인'
      description: '로그인하는 API입니다.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'john@email.com'
                password:
                  type: string
                  example: 'password'
      responses:
        '201':
          description: '로그인 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '500':
          description: '로그인 실패'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/token/refresh:
    post:
      tags:
        - auth
      summary: '토큰 재발급'
      description: '토큰을 재발급하는 API입니다.'
      responses:
        '201':
          description: '토큰 재발급 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '500':
          description: '토큰 재발급 실패'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /shop:
    get:
      tags:
        - shop
      summary: '판매 전체 조회'
      description: '판매 전체 조회하는 API입니다.'
      responses:
        '200':
          description: '판매 조회 성공'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - shop
      summary: '판매 생성'
      description: '판매를 생성하는 API입니다.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: integer
                  example: 5
                quantity:
                  type: integer
                  example: 10
                exchangeGrade:
                  type: string
                  enum:
                    - COMMON
                    - RARE
                    - SUPER_RARE
                    - LEGENDARY
                exchangeType:
                  type: array
                  items:
                    type: string
                exchangeDetails:
                  type: string
                  example: '교환 요청 내용'
                cardId:
                  type: string
      responses:
        '201':
          description: '판매 생성 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  price:
                    type: integer
                    example: 5
                  totalQuantity:
                    type: integer
                    example: 10
                  remainingQuantity:
                    type: integer
                    example: 10
                  exchangeGrade:
                    type: string
                    enum:
                      - COMMON
                      - RARE
                      - SUPER_RARE
                      - LEGENDARY
                  exchangeType:
                    type: array
                    items:
                      type: string
                  exchangeDetails:
                    type: string
                    example: '교환 요청 내용'
                  available:
                    type: boolean
                    example: true
                  sellerId:
                    type: string
                  cardId:
                    type: string
                  createAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
                  updateAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
        '400':
          description: '잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: jwt expired
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /shop/{shopId}:
    get:
      tags:
        - shop
      summary: '판매 상세 조회'
      description: '판매 전체 조회하는 API입니다.'
      parameters:
        - $ref: '#/components/parameters/shopIdParam'
      responses:
        '200':
          description: '판매 조회 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  price:
                    type: integer
                    example: 5
                  totalQuantity:
                    type: integer
                    example: 10
                  remainingQuantity:
                    type: integer
                    example: 8
                  exchangeGrade:
                    type: string
                    enum:
                      - COMMON
                      - RARE
                      - SUPER_RARE
                      - LEGENDARY
                  exchangeType:
                    type: array
                    items:
                      type: string
                  exchangeDetails:
                    type: string
                    example: '교환 요청 내용'
                  available:
                    type: boolean
                    example: true
                  sellerId:
                    type: string
                  cardId:
                    type: string
                  createAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
                  updateAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    patch:
      tags:
        - shop
      summary: '판매 수정'
      description: '판매를 수정하는 API입니다.'
      parameters:
        - $ref: '#/components/parameters/shopIdParam'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: integer
                  example: 5
                totalQuantity:
                  type: integer
                  example: 10
                remainingQuantity:
                  type: integer
                  example: 10
                exchangeGrade:
                  type: string
                  enum:
                    - COMMON
                    - RARE
                    - SUPER_RARE
                    - LEGENDARY
                exchangeType:
                  type: array
                  items:
                    type: string
                exchangeDetails:
                  type: string
                  example: '교환 요청 내용'
                cardId:
                  type: string
      responses:
        '200':
          description: '판매 수정 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  price:
                    type: integer
                    example: 5
                  totalQuantity:
                    type: integer
                    example: 10
                  remainingQuantity:
                    type: integer
                    example: 10
                  exchangeGrade:
                    type: string
                    enum:
                      - COMMON
                      - RARE
                      - SUPER_RARE
                      - LEGENDARY
                  exchangeType:
                    type: array
                    items:
                      type: string
                  exchangeDetails:
                    type: string
                    example: '교환 요청 내용'
                  available:
                    type: boolean
                    example: true
                  sellerId:
                    type: string
                  cardId:
                    type: string
                  createAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
                  updateAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
        '400':
          description: '잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - shop
      summary: '판매 취소'
      description: '판매를 취소하는 API입니다.'
      parameters:
        - $ref: '#/components/parameters/shopIdParam'
      responses:
        '204':
          description: '판매 취소 성공'
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: '잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  /shop/{shopId}/purchase:
    post:
      tags:
        - shop
      summary: '카드 구매'
      description: '카드를 구매하는 API입니다.'
      parameters:
        - $ref: '#/components/parameters/shopIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  example: 1
                totalPrice:
                  type: integer
                  example: 7
      responses:
        '201':
          description: '카드 구매 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  quantity:
                    type: integer
                    example: 5
                  totalPrice:
                    type: integer
                    example: 10
                  buyerId:
                    type: string
                  shopId:
                    type: string
                  createAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
                  updateAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
        '400':
          description: '잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /notifications:
    get:
      tags:
        - notification
      summary: '알림 전체 조회'
      description: '유저 알림을 조회하는 API입니다.'
      responses:
        '200':
          description: '알림 전체 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  shop:
                    type: string
                    example: 'SHOP'
                  recipientId:
                    type: string
                  content:
                    type: string
                    example: '[COMMON|뚜벅쵸] 1장을 성공적으로 구매했습니다.'
                  isRead:
                    type: boolean
                    example: false
                  createAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
                  updateAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  /notifications/{notificationId}:
    patch:
      tags:
        - notification
      summary: '판매 수정'
      description: '판매를 수정하는 API입니다.'
      parameters:
        - $ref: '#/components/parameters/notificationIdParam'
      responses:
        '200':
          description: '판매 수정 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  shop:
                    type: string
                    example: 'SHOP'
                  recipientId:
                    type: string
                  content:
                    type: string
                    example: '지우님이 [RARE|킹크랩] 1장 구매했습니다.'
                  isRead:
                    type: boolean
                    example: false
                  createAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
                  updateAt:
                    type: string
                    format: date-time
                    example: '2023-01-01T00:00:00Z'
        '400':
          description: '잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: jwt expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: '서버 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  /cards/{shopId}/exchange:
    post:
      tags:
        - exchange
      summary: '카드 교환 제안'
      description: '카드 교환을 제안하는 API입니다.'
      operationId: createExchange
      parameters:
        - $ref: '#/components/parameters/shopIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                buyerCardId:
                  type: string
                  format: uuid
                description:
                  type: string
      responses:
        '201':
          description: '교환 제안 생성'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exchange'
        '400':
          description: '잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  /cards/exchange/{exchangeId}/accept:
    post:
      tags:
        - exchange
      summary: '카드 교환 제안 승인'
      description: '카드 교환 제안을 승인하는 API입니다.'
      operationId: acceptExchange
      parameters:
        - $ref: '#/components/parameters/exchangeIdParam'
      responses:
        '200':
          description: '교환 승인'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/acceptExchange'
        '400':
          description: '잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: '찾을 수 없음'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  /cards/exchange/{exchangeId}/refuse:
    delete:
      tags:
        - exchange
      summary: '카드 교환 제안 거절'
      description: '카드 교환 제안을 거절하는 API입니다.'
      operationId: refuseExchange
      parameters:
        - $ref: '#/components/parameters/exchangeIdParam'
      responses:
        '204':
          description: No Content
        '400':
          description: '잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: '찾을 수 없음'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  /cards/exchange/{exchangeId}/cancel:
    delete:
      tags:
        - exchange
      summary: '카드 교환 제안 취소'
      description: '카드 교환 제안을 취소하는 API입니다.'
      operationId: cancelExchange
      parameters:
        - $ref: '#/components/parameters/exchangeIdParam'
      responses:
        '204':
          description: No Content
        '400':
          description: '잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: '찾을 수 없음'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  /points/box:
    post:
      tags:
        - points
      summary: '랜덤 포인트 획득'
      description: '사용자가 랜덤으로 포인트를 획득하는 API입니다.'
      operationId: drawRandomBox
      responses:
        '200':
          description: '랜덤 포인트 획득'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RandomPoints'
        '400':
          description: 1시간 이내에 이미 뽑았습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
  /points/last-draw-time:
    get:
      tags:
        - points
      summary: '유저 랜덤 상자 뽑은 시간 조회'
      description: '유저가 마지막으로 랜덤상자를 뽑은 시간을 조회하는 API입니다.'
      operationId: getLastDrawTime
      responses:
        '200':
          description: '랜덤상자 뽑은 시간'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastDrawTime'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
  /points/logs:
    get:
      tags:
        - points
      summary: '유저의 포인트로그 조회'
      description: '유저의 포인트로그를 조회하는 API입니다.'
      operationId: getPointLogs
      parameters:
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
        - $ref: '#/components/parameters/action'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: '유저의 포인트로그'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointLog'
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nickname:
          type: string
          example: '유저닉네임'
        email:
          type: string
          example: 'john@email.com'
        password:
          type: string
          example: 'password'
        point:
          type: number
          example: 50
        lastDrawTime:
          type: string
        createdAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        myCards:
          $ref: '#/components/schemas/Card'
        shops:
          $ref: '#/components/schemas/Shop'
        purchases:
          $ref: '#/components/schemas/Purchase'
        sellingExchanges:
          $ref: '#/components/schemas/Exchange'
        buyingExchanges:
          $ref: '#/components/schemas/Exchange'
        notifications:
          $ref: '#/components/schemas/Notification'
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          example: 'SHOP'
        content:
          type: string
          example: 'content'
        idRead:
          type: boolean
          example: false
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
    Card:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ownerId:
          type: string
          format: uuid
        name:
          type: string
          example: '카드 이름'
        price:
          type: integer
          example: 5
        grade:
          type: string
          enum:
            - COMMON
            - RARE
            - SUPER_RARE
            - LEGENDARY
        type:
          type: array
          items:
            type: string
        description:
          type: string
          example: '카드 설명'
        quantity:
          type: integer
          example: 5
        image:
          type: string
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        shops:
          $ref: '#/components/schemas/Shop'
        sellerExchanges:
          $ref: '#/components/schemas/Exchange'
        buyerExchanges:
          $ref: '#/components/schemas/Exchange'
    Shop:
      type: object
      properties:
        id:
          type: string
          format: uuid
        price:
          type: integer
          example: 5
        totalQuantity:
          type: integer
          example: 10
        remainingQuantity:
          type: integer
          example: 8
        exchangeGrade:
          type: string
          enum:
            - COMMON
            - RARE
            - SUPER_RARE
            - LEGENDARY
        exchangeType:
          type: array
          items:
            type: string
        exchangeDetails:
          type: string
          example: '교환 요청 내용'
        available:
          type: boolean
          example: true
        sellerId:
          type: string
        cardId:
          type: string
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        seller:
          $ref: '#/components/schemas/User'
        card:
          $ref: '#/components/schemas/Card'
    Purchase:
      type: object
      properties:
        id:
          type: string
          format: uuid
        quantity:
          type: integer
          example: 5
        totalPrice:
          type: integer
          example: 20
        buyerId:
          type: string
          format: uuid
        shopId:
          type: string
          format: uuid
        buyer:
          $ref: '#/components/schemas/User'
        shop:
          $ref: '#/components/schemas/Shop'
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
    Exchange:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
          example: '교환 제안 내용'
        complete:
          type: boolean
          example: false
        sellerId:
          type: string
          format: uuid
        buyerId:
          type: string
          format: uuid
        selerCardId:
          type: string
          format: uuid
        buyerCardId:
          type: string
          format: uuid
        shopId:
          type: string
          format: uuid
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
    acceptExchange:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
          example: '교환 제안 내용'
        complete:
          type: boolean
          example: true
        sellerId:
          type: string
          format: uuid
        buyerId:
          type: string
          format: uuid
        selerCardId:
          type: string
          format: uuid
        buyerCardId:
          type: string
          format: uuid
        createAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updateAt:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
    PointLog:
      type: array
      items:
        oneOf:
          - type: object
            properties:
              id:
                type: string
                format: uuid
              amount:
                type: integer
                example: 50
              action:
                type: string
                enum:
                  - INITIAL_POINT
                  - PURCHASE
                  - SALE
                  - RANDOM_REWARD
              metaData:
                type: object
                example: null
              createAt:
                type: string
                format: date-time
                example: '2023-01-01T00:00:00Z'
              updateAt:
                type: string
                format: date-time
                example: '2023-01-01T00:00:00Z'
              userId:
                type: string
                format: uuid
          - type: object
            properties:
              id:
                type: string
                format: uuid
              amount:
                type: integer
                example: -5
              action:
                type: string
                enum:
                  - PURCHASE
                  - INITIAL_POINT
                  - SALE
                  - RANDOM_REWARD
              metaData:
                type: object
                example: { purchaseId: '123e4567-e89b-12d3-a456-426614174000' }
              createAt:
                type: string
                format: date-time
                example: '2023-01-01T00:00:00Z'
              updateAt:
                type: string
                format: date-time
                example: '2023-01-01T00:00:00Z'
              userId:
                type: string
                format: uuid
    RandomPoints:
      type: object
      properties:
        randomPoints:
          type: integer
    LastDrawTime:
      type: object
      properties:
        lastDrawTime:
          type: string
          format: date-time
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    exchangeIdParam:
      name: exchangeId
      in: path
      required: true
      description: 카드 교환 제안 ID
      schema:
        type: string
        format: uuid
    shopIdParam:
      name: shopId
      in: path
      required: true
      description: 상점 ID
      schema:
        type: string
        format: uuid
    notificationIdParam:
      name: notificationId
      in: path
      required: true
      description: 알림 ID
      schema:
        type: string
        format: uuid
    startDate:
      in: query
      name: startDate
      schema:
        type: string
      description: The start date for filtering point logs (e.g., "2023-12-03")
    endDate:
      in: query
      name: endDate
      schema:
        type: string
      description: The end date for filtering point logs (e.g., "2023-12-03")
    action:
      in: query
      name: action
      schema:
        type: string
        enum:
          - INITIAL_POINT
          - PURCHASE
          - SALE
          - RANDOM_REWARD
      description: The action type for filtering point logs
    page:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
      description: The page number for pagination (must be 1 or higher)
    limit:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 100
      description: The number of items per page (must be between 1 and 100)
    order:
      in: query
      name: order
      schema:
        type: string
        enum:
          - asc
          - desc
      description: The sorting order of the results (asc for ascending, desc for descending)
